Hi! My name is Jackson and I am looking forward to speaking with the Fetch team soon. Here are my responses to Assignment 2. Thank you for your consideration.

1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I chose to use python for a few reasons. First, Python is great for scripting! If this challenge had required me to build a class and focused on object-oriented practices, I may have chosen to use a language like Java instead—though OOP in python is becoming increasingly common. Second, and most importantly, python has phenomenal data analysis libraries. When I saw that the problem required working with CSVs my mind immediately went to using Pandas’ DataFrame object to manipulate the data. These objects make using data extremely easy, in my code, I use pandas’ group by functionality iterrows to iterate over the rows, but there is so much more interesting functionality that I didn’t get to demonstrate. There is functionality to query DataFrames similar to relational databases, vectorization allows for DataFrames to be modified extremely quickly, and DataFrames work great with python visualization libraries like Matplotlib and Plotly. Lastly, I chose to work with python because I am very familiar with it. I have been coding in python for the last four years and recently have been spending the majority of my time programming in python.

For example, these three lines of code would show a bar graph of the points for each of the payers.

import plotly.express as px
fig = px.bar(df, x=df.payer, y=df.points)
fig.show()

2. What are the advantages and disadvantages of your solution?

Many of the reasons I chose to use python are advantages. As I have stated, Python’s various data analysis modules make manipulating data simple. These modules also make the program very easy to scale if one wants to implement new features, one can rely on already implemented functions. In addition to being simple to use and scale, the underlying panda's functions are implemented to make working with large data frames fast and efficient. This is important because users may have large datasets of points and spending points is an essential function that every user is going to do, so the implementation should be as efficient as possible. This need for efficiency transitions well to talking about the deficiencies of my solution. Python tends to be a slower language than languages like C; therefore, if this function is going to be used for most transactions on the app one would want to pick the fastest language possible. Next, my implementation in python is slower than I would like. Generally, using Python’s vectorization functions and .apply() method are the fastest ways to do operations on DataFrames. I was unable to find a way to use those when manipulating this data. I also reiterate through the data to format the output as desired, iterating through the DataFrame is probably the most costly operation, especially as the CSVs get larger, so in the future, I would want to work on an implementation that doesn’t have to reiterate over the data. Lastly, a problem with using python modules is that they are often updated and methods are deprecated. This means there is a level of upkeep to keep the code up-to-date. Furthermore, while the implementations of functions are fast, they can be a black box that can create unrealized bottlenecks in the system. And without knowing exactly how they are implemented they may not be as efficient as a highly-specific, self-developed algorithm.

3. What has been a favorite school/personal project thus far? What about it challenged you?

My favorite personal project was an emotion recognition system I built using Tensorflow, OpenCV, and Flask. This project is a perfect representation of what I love about computer science, it has forced me to grow as a computer scientist through research, allowed me to learn new tools, and was done while working with good people.
The first challenge of this process was research, I searched to find a dataset that I could use to train the model and technologies that I could use to apply the model in real-time. I found a dataset that worked and discovered that I could use OpenCV and flask to apply the model in real-time using my computer’s webcam. 
The next challenge was the unexpected. I found it extremely difficult to get the dataset into a form that a neural network could use. I hadn’t had very much experience with datasets that weren’t already in a usable format. I struggled until I asked one of my classmates for help. Very quickly we worked together to reformat the data, and with our combined knowledge we were able to save me a lot of time. This represents a very important lesson that I have learned throughout my schooling and past internships: you should always ask for help earlier rather than later. If you have given a task a respectable effort and still cannot solve it, always go to a peer or a mentor, and chances are they will have seen this issue before or have their idea about how it could be fixed. Plus, working with others is always more fun than working alone. 
The next challenge was training the model, I knew I would use a Convolutional Neural Network, but to decide the number of layers and the optimizer I had to test a few different configurations and compare them using Weights and Biases. Lastly, I had to put all of these different technologies together. This took a full day of debugging and learning, but in the end, I had a tangible program that I could give to my friends and parents to use. 
Watching others use something I had built and getting excited about machine learning was such a pleasure to see. Building something usable and being able to bring others joy with it is the reason I love computer science. If I am offered a chance to work at Fetch, I would love to do the same this summer. 
